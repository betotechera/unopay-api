import java.util.regex.Matcher

buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'net.researchgate:gradle-release:2.4.0'
		classpath 'org.ajoberstar:gradle-git:1.5.1'
		classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1'
		classpath 'no.nils:wsdl2java:0.10'
	}

}

plugins {
	id 'net.researchgate.release' version '2.4.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'groovy'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'no.nils.wsdl2java'

task wrapper(type: Wrapper) {
	gradleVersion = '3.4.1'
}

jar {
	baseName = 'unopay-api'
	version = version
}

springBoot {
	executable = true
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenLocal()
    mavenCentral()
	jcenter()
	maven { url "${nexusUrl}/content/repositories/thirdparty/" }
	maven { url "${nexusUrl}/content/repositories/releases/" }
	maven { url "${nexusUrl}/content/repositories/Unovation_Releases/" }
	maven { url "${nexusUrl}/content/repositories/Unovation/" }
}

dependencies {
	compile 'br.com.unopay:unopay-common-dependencies:0.0.5'
	compile 'br.com.unopay:unopay-boot-commons:0.0.19'
	compile 'io.springfox:springfox-swagger2:2.4.0'

	compile 'org.springframework.boot:spring-boot-starter-security'
	compile 'org.springframework.security.oauth:spring-security-oauth2'
	compile 'org.springframework.boot:spring-boot-starter-data-jpa'
	compile 'org.springframework.hateoas:spring-hateoas'

    compile 'org.springframework:spring-jms'
    compile 'org.springframework:spring-oxm'

	compile 'com.google.guava:guava:21.0'

	compile 'com.oracle.jdbc:ojdbc8:12.2.0.1'
	compile 'org.hsqldb:hsqldb'
	compile "org.flywaydb:flyway-core:4.1.1"
	compile "org.apache.commons:commons-lang3:3.6"
	compile "org.springframework.boot:spring-boot-starter-mail"
	compile "com.hubspot.jinjava:jinjava:2.1.12"
	compile "org.springframework.boot:spring-boot-starter-amqp"
	compile 'com.rabbitmq:amqp-client:4.0.0'
	compile 'commons-io:commons-io:2.4'
	compile 'com.amazonaws:aws-java-sdk-s3:1.11.109'
	compile 'commons-fileupload:commons-fileupload:1.3.1'
	compile 'org.jvnet.jaxb2_commons:jaxb2-basics-runtime:0.11.0'
	compile 'com.sun.xml.ws:jaxws-rt:2.1.3'
	compile 'org.quartz-scheduler:quartz:2.2.1'
	compile 'org.quartz-scheduler:quartz-jobs:2.2.1'
	compile group: 'eu.payzen.sdk', name: 'payzen-ws-sdk', version: '1.0.6'
	compile group: 'com.opencsv', name: 'opencsv', version: '4.0'
	compile group: 'br.com.caelum.stella', name: 'caelum-stella-bean-validation', version: '2.1.2'

	compileOnly 'org.projectlombok:lombok:1.16.18'

	testCompile 'com.jayway.jsonpath:json-path'
	testCompile "org.springframework.boot:spring-boot-starter-test"
	testCompile 'org.flywaydb.flyway-test-extensions:flyway-spring-test:4.0'
	testCompile "org.codehaus.groovy:groovy:2.4.7"
	testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
	testCompile 'org.spockframework:spock-spring:0.7-groovy-2.0'
    testCompile "org.hamcrest:hamcrest-core:1.3"
	testRuntime "cglib:cglib-nodep:3.2.4"
    testRuntime "org.objenesis:objenesis:2.5.1"
	testCompile 'br.com.six2six:fixture-factory:3.1.0'
	testRuntime 'com.athaydes:spock-reports:1.2.7'


}


release {
	failOnCommitNeeded = true
	failOnPublishNeeded = true
	failOnSnapshotDependencies = true
	failOnUnversionedFiles = true
	failOnUpdateNeeded = true
	revertOnFail = true
	tagCommitMessage = 'creating tag: '
	buildTasks = ['build']
	tagTemplate = 'unopay-api-${version}'
	versionPatterns = [
			/(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
	]
	scmAdapters = [
			net.researchgate.release.GitAdapter,
	]

	git {
		requireBranch = 'master'
		pushToRemote = 'origin'
		commitVersionFileOnly = false
	}
}

bootRun {
	systemProperties System.properties
}

task removeReleases(type: Exec) {
	commandLine "bash", "-c", " cd releases; ls -t | tail -n 2 | xargs rm"
}

task backupJar(type: Copy, dependsOn: removeReleases) {
	from "build/libs/unopay-api-${version}.jar"
	into 'releases'
	doLast {
		grgit.add(patterns: ['releases'])
		grgit.commit(message: "Committing release jar version ${version}", amend: true)
		grgit.pull()
		grgit.push()
	}
}

task copyJacoco(type: Copy) {
	from "build/jacoco/test.exec"
	into "releases"
	rename ('test.exec', "jacoco-api-${version}.exec")
	doLast {
		grgit.add(patterns: ['releases'])
		grgit.commit(message: "Committing jacoco report to version: ${version}", amend: true)
		grgit.pull()
		grgit.push()
	}
}

afterReleaseBuild.dependsOn backupJar, copyJacoco

test.finalizedBy('sonarqube')

sonarqube {
    properties {
        property 'sonar.projectName', 'unopay-api'
		property 'sonar.projectKey', 'unopay-api'
		property 'sonar.exclusions', '**/*.html'
    }
}
